addEventListener("message",({data:h})=>{const n=m=>{let a=null;try{const r=m.toString().trim();r.length>0&&(_=+r,a=isNaN(_)?null:_)}catch{a=null}var _;return a},y=h.jsonData,b={},N={},p={};let M=null;try{for(const m of Object.keys(y)){const a=new Array,r=y[m];if("object"!=typeof r||!("reac"in r))continue;const _=r.reac;if(null===_)continue;let t={max_d:Number.MIN_VALUE,max_r:Number.MIN_VALUE,min_d:Number.MAX_VALUE,min_r:Number.MAX_VALUE,max_d_m:"0",max_r_m:"0",min_d_m:"0",min_r_m:"0"};for(const o of Object.keys(_)){const l=_[o];let c=n(l.tx),i=n(l.ty),u=n(l.tz),x=n(l.mx),f=n(l.my),d=n(l.mz);const v={id:o.replace("node",""),tx:null==c?0:-c,ty:null==i?0:-i,tz:null==u?0:-u,mx:x??0,my:f??0,mz:null==d?0:-d};a.push(v);for(const e of[c,i,u])t.max_d<e&&(t.max_d=e,t.max_d_m=o),t.min_d>e&&(t.min_d=e,t.min_d_m=o);for(const e of[x,f,d])t.max_r<e&&(t.max_r=e,t.max_r_m=o),t.min_r>e&&(t.min_r=e,t.min_r_m=o)}const s=m.replace("Case","");b[s]=a,N[s]=Math.max(Math.abs(t.max_d),Math.abs(t.min_d)),p[s]=t}}catch(m){M=m}postMessage({reac:b,error:M,max_value:N,value_range:p})});